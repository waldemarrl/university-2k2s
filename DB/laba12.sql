--1
ALTER TABLE TEACHER ADD BIRTHDAY DATE;
ALTER TABLE TEACHER ADD SALARY NUMBER(6,2);
SELECT * FROM TEACHER;

DECLARE
CURSOR C_TEACHER IS
SELECT TEACHER, BIRTHDAY, SALARY FROM TEACHER;
B_TEACHER TEACHER.BIRTHDAY%TYPE;
S_TEACHER TEACHER.SALARY%TYPE;
BEGIN 
    FOR ROW_TEACHER IN C_TEACHER
    LOOP
    B_TEACHER := TO_DATE(TRUNC(DBMS_RANDOM.VALUE(TO_CHAR(DATE '1960-01-01','J'),TO_CHAR(DATE '2000-12-31','J'))),'J');
    DBMS_OUTPUT.PUT_LINE(B_TEACHER);
    S_TEACHER := Round(DBMS_RANDOM.VALUE(20000, 200000)) / 100;
    DBMS_OUTPUT.PUT_LINE(S_TEACHER);
    UPDATE TEACHER SET TEACHER.BIRTHDAY = B_TEACHER, TEACHER.SALARY = S_TEACHER WHERE TEACHER.TEACHER = ROW_TEACHER.TEACHER;
    END LOOP;
END;

--2
SELECT * FROM TEACHER WHERE TO_CHAR((BIRTHDAY), 'D') = 1;

--3
CREATE VIEW TEACH AS SELECT * FROM TEACHER WHERE TO_CHAR(BIRTHDAY,'Month') = TO_CHAR(sysdate + 30,'Month');
DROP VIEW TEACH;

SELECT * FROM TEACH;

--4
CREATE VIEW M_TEACH AS SELECT 
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 1 THEN 1 ELSE 0 END) AS "JANUARY",
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 2 THEN 1 ELSE 0 END) AS "FEBRUARY",
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 3 THEN 1 ELSE 0 END) AS "MARCH",
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 4 THEN 1 ELSE 0 END) AS "APRIL",
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 5 THEN 1 ELSE 0 END) AS "MAY",
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 6 THEN 1 ELSE 0 END) AS "JUNE",
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 7 THEN 1 ELSE 0 END) AS "JULY",
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 8 THEN 1 ELSE 0 END) AS "AUGUST",
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 9 THEN 1 ELSE 0 END) AS "SEPTEMBER",
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 10 THEN 1 ELSE 0 END) AS "OCTOBER",
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 11 THEN 1 ELSE 0 END) AS "NOVEMBER",
SUM(CASE WHEN EXTRACT(MONTH FROM BIRTHDAY) = 12 THEN 1 ELSE 0 END) AS "DECEMBER"
FROM TEACHER;

SELECT * FROM M_TEACH;

--5
DECLARE
CURSOR C_TEACH IS SELECT * FROM TEACHER;
ROW_TEACHER TEACHER%ROWTYPE;
YEAR_B INT;
BEGIN
FOR ROW_TEACHER IN C_TEACH
LOOP
YEAR_B := (TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY') + 1) - TO_NUMBER(TO_CHAR(ROW_TEACHER.BIRTHDAY, 'YYYY')));

IF(MOD(YEAR_B, 10) = 0)
THEN DBMS_OUTPUT.PUT_LINE(ROW_TEACHER.TEACHER_NAME||' YEARS:'||YEAR_B);
END IF;
END LOOP;
END;


--6
DECLARE
CURSOR C_PULPIT IS SELECT * FROM PULPIT;
CURSOR C_TEACHER IS SELECT * FROM TEACHER;
CURSOR C_FACULTY IS SELECT * FROM FACULTY;
SUM_S INT := 0;
COUNT_S INT := 0;
BEGIN 
    FOR ROW_PULPIT IN C_PULPIT
    LOOP
    FOR ROW_TEACHER IN C_TEACHER
    LOOP
    IF ROW_TEACHER.PULPIT = ROW_PULPIT.PULPIT
    THEN 
    SUM_S := SUM_S + ROW_TEACHER.SALARY;
    COUNT_S := COUNT_S + 1;
    END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('PULPIT: '||ROW_PULPIT.PULPIT||' AVERAGE SALARY: '||FLOOR(SUM_S/COUNT_S));
    COUNT_S := 0;
    SUM_S := 0;
    END LOOP;
    FOR ROW_FACULTY IN C_FACULTY
    LOOP
    FOR ROW_PULPIT IN C_PULPIT
    LOOP
    IF ROW_FACULTY.FACULTY = ROW_PULPIT.FACULTY
    THEN
    FOR ROW_TEACHER IN C_TEACHER
    LOOP
    IF ROW_TEACHER.PULPIT = ROW_PULPIT.PULPIT
    THEN
    SUM_S := SUM_S + ROW_TEACHER.SALARY;
    COUNT_S := COUNT_S + 1;
    END IF;
    END LOOP;
    END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('FACULTY: '||ROW_FACULTY.FACULTY||' AVERAGE SALARY: '||FLOOR(SUM_S/COUNT_S));
    COUNT_S := 0;
    SUM_S := 0;
    END LOOP;
    FOR ROW_TEACHER IN C_TEACHER
    LOOP
    SUM_S := SUM_S + ROW_TEACHER.SALARY;
    COUNT_S := COUNT_S + 1;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('AVERAGE SALARY = '|| FLOOR(SUM_S/COUNT_S));
END;

--7
DECLARE
X NUMBER := 0;
Y NUMBER := 5;
Z NUMBER;
BEGIN
    Z := Y / X;
    EXCEPTION 
        WHEN ZERO_DIVIDE
            THEN DBMS_OUTPUT.PUT_LINE('Деление на 0');
END;

--8
SELECT * FROM TEACHER;
DECLARE
TEACH TEACHER%ROWTYPE;
BEGIN
    SELECT * INTO TEACH FROM TEACHER WHERE TEACHER = 'АКНВЧ';
    DBMS_OUTPUT.PUT_LINE(TEACH.TEACHER);
END;
    
    DECLARE
    TEACH TEACHER%ROWTYPE;
    BEGIN
        SELECT * INTO TEACH FROM TEACHER WHERE TEACHER = 'DDDDD';
        DBMS_OUTPUT.PUT_LINE(TEACH.TEACHER);
        EXCEPTION 
            WHEN NO_DATA_FOUND
                THEN DBMS_OUTPUT.PUT_LINE('Преподаватель не найден!');
END;

--9
DECLARE 
    E_FIRST EXCEPTION;
    PRAGMA EXCEPTION_INIT(E_FIRST, 100);
    T TEACHER.TEACHER_NAME%TYPE;
    TD TEACHER.TEACHER_NAME%TYPE;
BEGIN 
    SELECT TEACHER INTO T
    FROM TEACHER WHERE SALARY BETWEEN 750 AND 751;
BEGIN 
        SELECT T1.TEACHER INTO TD
        FROM TEACHER T1, TEACHER T2 
        WHERE T1.TEACHER_NAME = T2.TEACHER_NAME AND
        T1.TEACHER != T2.TEACHER AND
        ROWNUM < 2;
        DBMS_OUTPUT.PUT_LINE(TD);
END;
    DBMS_OUTPUT.PUT_LINE(T);
    EXCEPTION 
        WHEN E_FIRST
            THEN DBMS_OUTPUT.PUT_LINE('FIRST EXCEPTION!');
                RAISE_APPLICATION_ERROR(-20001, 'E_FIRST');
END;

--10
DECLARE 
M_SALARY INT;
BEGIN
    SELECT MAX(SALARY) INTO M_SALARY FROM TEACHER;
    DBMS_OUTPUT.PUT_LINE(M_SALARY);
    EXCEPTION 
        WHEN NO_DATA_FOUND
            THEN DBMS_OUTPUT.PUT_LINE('EXECPTION');
END;
