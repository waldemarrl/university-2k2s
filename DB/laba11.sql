SET SERVEROUTPUT ON;
--1
DECLARE
    v_TEACHER SYS.TEACHER%ROWTYPE;
BEGIN
    SELECT * INTO v_TEACHER FROM TEACHER WHERE TEACHER = 'РЖК';
    DBMS_OUTPUT.PUT_LINE(v_TEACHER.TEACHER || ' ' ||v_TEACHER.TEACHER_NAME || ' ' || v_TEACHER.PULPIT || ' ' || v_TEACHER.PULPIT_NAME);
END;

SELECT * FROM TEACHER;

--2
DECLARE
  v_TEACHER SYS.TEACHER%ROWTYPE;
BEGIN
    SELECT * INTO v_TEACHER FROM TEACHER;
    DBMS_OUTPUT.PUT_LINE(v_TEACHER.TEACHER || ' ' ||v_TEACHER.TEACHER_NAME || ' ' || v_TEACHER.PULPIT || ' ' || v_TEACHER.PULPIT_NAME);
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Teacher_Name not found (ORA '||SQLCODE||')');
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

--3
DECLARE
  v_TEACHER SYS.TEACHER%ROWTYPE;
BEGIN
    SELECT * INTO v_TEACHER FROM TEACHER;
    DBMS_OUTPUT.PUT_LINE(v_TEACHER.TEACHER || ' ' ||v_TEACHER.TEACHER_NAME || ' ' || v_TEACHER.PULPIT || ' ' || v_TEACHER.PULPIT_NAME);
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Teacher_Name not found (ORA '||SQLCODE||')');
    WHEN TOO_MANY_ROWS
    THEN DBMS_OUTPUT.PUT_LINE('Result consist more than one row (ORA '||SQLCODE||')');
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

--4
DECLARE 
    v_PULPIT TEACHER.PULPIT%TYPE;
BEGIN
    SELECT PULPIT INTO v_PULPIT FROM TEACHER WHERE PULPIT = 'ИСаТ';
    DBMS_OUTPUT.PUT_LINE('Pulpit Name: ' || v_PULPIT);
    EXCEPTION
        WHEN NO_DATA_FOUND 
        THEN DBMS_OUTPUT.PUT_LINE('Pulpit not found....');
END;

--5
BEGIN
    INSERT INTO TEACHER (TEACHER, TEACHER_NAME, PULPIT, PULPIT_NAME)
    VALUES ('РЖК', 'Кальчевский Даниил Андреевич', 'ИСиТ', 'Информационных систем и технологий');
    EXCEPTION
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

BEGIN
    UPDATE TEACHER SET PULPIT = 'ЛК' WHERE TEACHER = 'РЖК';
     EXCEPTION
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;

BEGIN
    DELETE FROM TEACHER WHERE PULPIT = 'ЛК';
     EXCEPTION
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;
ROLLBACK;

--6
SELECT * FROM TEACHER;
 DECLARE
    CURSOR curs_teacher IS
    SELECT TEACHER, TEACHER_NAME, PULPIT, PULPIT_NAME
    FROM TEACHER;
        v_idteacher SYS.TEACHER.TEACHER%TYPE;
        v_teachername SYS.TEACHER.TEACHER_NAME%TYPE;
        v_pulpit SYS.TEACHER.PULPIT%TYPE;
        v_pulpitname SYS.TEACHER.PULPIT_NAME%TYPE;
    BEGIN 
        OPEN curs_teacher;
        DBMS_OUTPUT.PUT_LINE('rowcount = ' ||curs_teacher%rowcount);
        LOOP
            FETCH curs_teacher INTO v_idteacher, v_teachername, v_pulpit, v_pulpitname;
            EXIT WHEN curs_teacher%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('' ||v_idteacher || '' ||v_teachername || '' ||v_pulpit || '' || v_pulpitname);
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('rowcount = ' ||curs_teacher%rowcount);
        CLOSE curs_teacher;
        EXCEPTION
            WHEN OTHERS
                THEN DBMS_OUTPUT.PUT_LINE('CODE ERROR: '||SQLCODE||' MESSAGE: '||SQLERRM);
    END;
    
--7
SELECT * FROM AUDITORIUM;
DECLARE
    CURSOR CURS_SUBJECT IS
    SELECT * FROM SUBJECT;
    REC SUBJECT%ROWTYPE;
    BEGIN
        OPEN CURS_SUBJECT;
        DBMS_OUTPUT.PUT_LINE('ROWS READ: '||CURS_SUBJECT%ROWCOUNT);
        FETCH CURS_SUBJECT INTO REC;
        WHILE CURS_SUBJECT%FOUND
        LOOP
        DBMS_OUTPUT.PUT_LINE(REC.SUBJECT||' '||REC.SUBJECT_NAME||' '||REC.PULPIT);
        FETCH CURS_SUBJECT INTO REC;
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('ROWS READ: '||CURS_SUBJECT%ROWCOUNT);
        CLOSE CURS_SUBJECT;
    END;

--8
DECLARE
    CURSOR CURS_AUDITORIUM (MIN AUDITORIUM.AUDITORIUM%TYPE, MAX AUDITORIUM.AUDITORIUM%TYPE) IS
    SELECT * FROM AUDITORIUM WHERE AUDITORIUM.AUDITORIUM_CAPACITY >= MIN AND AUDITORIUM.AUDITORIUM_CAPACITY <= MAX;
    ROW_AUDITORIUM CURS_AUDITORIUM%ROWTYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('CAPACITY 0-20:');
    FOR ROW_AUDITORIUM IN CURS_AUDITORIUM(0,20)
    LOOP
    DBMS_OUTPUT.PUT_LINE(
    ROW_AUDITORIUM.AUDITORIUM||' '||
    ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
    ROW_AUDITORIUM.AUDITORIUM_CAPACITY
    );
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('CAPACITY 21-30:');
    OPEN CURS_AUDITORIUM(21,30);
    FETCH CURS_AUDITORIUM INTO ROW_AUDITORIUM;
    WHILE (CURS_AUDITORIUM%FOUND)
    LOOP
    DBMS_OUTPUT.PUT_LINE(
    ROW_AUDITORIUM.AUDITORIUM||' '||
    ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
    ROW_AUDITORIUM.AUDITORIUM_CAPACITY
    );
    FETCH CURS_AUDITORIUM INTO ROW_AUDITORIUM;
    END LOOP;
    CLOSE CURS_AUDITORIUM;
    
    DBMS_OUTPUT.PUT_LINE('CAPACITY 31-60:');
    OPEN CURS_AUDITORIUM(31,60);
    LOOP 
    FETCH CURS_AUDITORIUM INTO ROW_AUDITORIUM;
    EXIT WHEN CURS_AUDITORIUM%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(
    ROW_AUDITORIUM.AUDITORIUM||' '||
    ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
    ROW_AUDITORIUM.AUDITORIUM_CAPACITY
    );
    END LOOP;
    CLOSE CURS_AUDITORIUM;
    
    DBMS_OUTPUT.PUT_LINE('CAPACITY 61-80:');
    FOR ROW_AUDITORIUM IN CURS_AUDITORIUM(61,80)
    LOOP
    DBMS_OUTPUT.PUT_LINE(
    ROW_AUDITORIUM.AUDITORIUM||' '||
    ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
    ROW_AUDITORIUM.AUDITORIUM_CAPACITY
    );
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('CAPACITY 81+');
    FOR ROW_AUDITORIUM IN CURS_AUDITORIUM(81,1000)
    LOOP
    DBMS_OUTPUT.PUT_LINE(
    ROW_AUDITORIUM.AUDITORIUM||' '||
    ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
    ROW_AUDITORIUM.AUDITORIUM_CAPACITY
    );
    END LOOP;
END;

--9
DECLARE
    TYPE AUDIT_CURSOR_TYPE IS REF CURSOR
    RETURN AUDITORIUM%ROWTYPE;
    C_AUDITORIUM AUDIT_CURSOR_TYPE;
    ROW_AUDITORIUM C_AUDITORIUM%ROWTYPE;
BEGIN
    OPEN C_AUDITORIUM FOR SELECT * FROM AUDITORIUM;
    FETCH C_AUDITORIUM INTO ROW_AUDITORIUM;
    WHILE(C_AUDITORIUM%FOUND)
    LOOP
    DBMS_OUTPUT.PUT_LINE(
    ROW_AUDITORIUM.AUDITORIUM||' '||
    ROW_AUDITORIUM.AUDITORIUM_NAME||' '||
    ROW_AUDITORIUM.AUDITORIUM_CAPACITY
    );
    FETCH C_AUDITORIUM INTO ROW_AUDITORIUM;
    END LOOP;
    CLOSE C_AUDITORIUM;
END;

--10
DECLARE
    CURSOR CUR_AUD(MIN AUDITORIUM.AUDITORIUM_CAPACITY%TYPE, MAX AUDITORIUM.AUDITORIUM_CAPACITY%TYPE) IS
    SELECT AUDITORIUM, AUDITORIUM_CAPACITY FROM AUDITORIUM
    WHERE AUDITORIUM_CAPACITY BETWEEN MIN AND MAX FOR UPDATE;
    AU AUDITORIUM.AUDITORIUM%TYPE;
    AC AUDITORIUM.AUDITORIUM_CAPACITY%TYPE;
BEGIN 
    OPEN CUR_AUD(40,80);
    FETCH CUR_AUD INTO AU, AC;
    WHILE(CUR_AUD%FOUND)
    LOOP
    AC := AC * 0.9;
    UPDATE AUDITORIUM SET AUDITORIUM_CAPACITY = AC
    WHERE CURRENT OF CUR_AUD;
    DBMS_OUTPUT.PUT_LINE(AU||' '||AC);
    FETCH CUR_AUD INTO AU, AC;
    END LOOP;
    CLOSE CUR_AUD;
END;